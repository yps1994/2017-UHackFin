const server = require('../server');
const logger = require('../lib/logger');

// Normalize port
const normalizePort = val => {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
};

// on listening event
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  logger.info('Listening on ' + bind);
};

// on error event
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
  case 'EACCES':
    logger.error(bind + ' requires elevated privileges');
    throw error;
  case 'EADDRINUSE':
    logger.error(bind + ' is already in use');
    throw error;
  default:
    throw error;
  }
};

const port = normalizePort(process.env.PORT || '3000');
server.listen(port);
server.on('listening', onListening);
server.on('error', onError);
